name: release

on:
  push:
    tags:
      - "v*"
  # REMOVE THIS WHEN READY
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        # UNCOMMENT WHEN READY
        # run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        run: echo "VERSION=v0.0.1" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      # UNCOMMENT WHEN READY
      # - name: Check that tag version and Cargo.toml version are the same
      #   shell: bash
      #   run: |
      #     if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
      #       echo "version does not match Cargo.toml" >&2
      #       exit 1
      #     fi
          
      # - name: Create GitHub release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build release binary
      shell: bash
      run: |
        cargo build --verbose --release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/release/legba.exe"
        else
          bin="target/release/legba"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=legba-$version-x86_64" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"
        cp "$BIN" "$ARCHIVE"/
        cp -rf {README.md,LICENSE,docs} "$ARCHIVE"/

    - name: Build archive (Windows)
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE.zip" "$ARCHIVE"
        certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
        echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

    - name: Build archive (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    # UNCOMMENT WHEN READY
    # - name: Upload release archive
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   shell: bash
    #   run: |
    #     version="${{ needs.create-release.outputs.version }}"
    #     gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  build-release-deb:
    name: build-release-deb
    needs: ['create-release']
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: 1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install packages (Ubuntu)
      shell: bash
      run: |
        .github/workflows/ubuntu-install-packages

    - name: Install cargo-deb
      shell: bash
      run: |
        cargo install cargo-deb

    - name: Create deployment directory
      shell: bash
      run: |
        dir=deployment/deb
        mkdir -p "$dir"
        echo "DEPLOY_DIR=$dir" >> $GITHUB_ENV

    - name: Build release binary
      shell: bash
      run: |
        cargo deb --profile deb
        version="${{ needs.create-release.outputs.version }}"
        echo "DEB_DIR=target/debian" >> $GITHUB_ENV
        echo "DEB_NAME=legba_$version-1_amd64.deb" >> $GITHUB_ENV

    - name: Create sha256 sum of deb file
      shell: bash
      run: |
        cd "$DEB_DIR"
        sum="$DEB_NAME.sha256"
        shasum -a 256 "$DEB_NAME" > "$sum"
        echo "SUM=$sum" >> $GITHUB_ENV

    # UNCOMMENT WHEN READY
    # - name: Upload release archive
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   shell: bash
    #   run: |
    #     cd "$DEB_DIR"
    #     version="${{ needs.create-release.outputs.version }}"
    #     gh release upload "$version" "$DEB_NAME" "$SUM"